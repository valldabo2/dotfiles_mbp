Inspiration
https://ww.com/blog/my-emacs-config/

Make searchable on osx spotlight
https://github.com/Homebrew/legacy-homebrew/issues/4635

* TODO
  https://github.com/alphapapa/org-rifle
  https://github.com/spotify/dockerfile-mode
  https://github.com/emacs-pe/docker-tramp.el
* Config
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 100000000)
    (setq default-directory "~/")


    (defun reload-emacs-configuration ()
      (interactive)
      (load-file user-init-file))

    (defun open-emacs-configuration ()
      (interactive)
      (find-file "~/.emacs.d/emacs.org"))
  #+END_SRC
* Necessary
  Makes the custom variables not be inside init.el. But in a custom file created
  https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (make-temp-file "emacs-custom"))
  #+END_SRC
  Add support for more packages
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-archives
	  '(("gnu" . "https://elpa.gnu.org/packages/")
	    ("org" . "http://orgmode.org/elpa/")
	    ("melpa" . "https://melpa.org/packages/")
	    ("melpa-stable" . "https://stable.melpa.org/packages/")
	    ))

    ;; (package-initialize)
    ;; (package-refresh-contents)
  #+END_SRC

  Use package for more compact package management
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-install 'use-package)
      (eval-when-compile (require 'use-package)))

    ;; Enable defer and ensure by default for use-package
    ;; Keep auto-save/backup files separate from source code:  https://github.com/scalameta/metals/issues/1027
    (setq 
     use-package-always-ensure t
     backup-directory-alist `((".*" . ,temporary-file-directory))
     auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
     )
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
  #+END_SRC
* GUI
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    (use-package solarized-theme)
    (load-theme 'solarized-dark t)

    (use-package fill-column-indicator
      :config
      (add-hook 'prog-mode-hook #'fci-mode)
    )
  #+END_SRC
** Hydras 
   #+BEGIN_SRC emacs-lisp
    (use-package hydra)
   #+END_SRC
*** Buffers 
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-buffer-menu (:hint nil :color pink)
      "
	  ^Mark^             ^Unmark^           ^Actions^          ^Search
	  ^^^^^^^^-----------------------------------------------------------------
	  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
	  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
	  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
	  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
	  _~_: modified
	  "
      ("m" Buffer-menu-mark)
      ("u" Buffer-menu-unmark)
      ("U" Buffer-menu-backup-unmark)
      ("d" Buffer-menu-delete)
      ("D" Buffer-menu-delete-backwards)
      ("s" Buffer-menu-save)
      ("~" Buffer-menu-not-modified)
      ("x" Buffer-menu-execute)
      ("b" Buffer-menu-bury)
      ("g" revert-buffer)
      ("T" Buffer-menu-toggle-files-only)
      ("O" Buffer-menu-multi-occur :color blue)
      ("I" Buffer-menu-isearch-buffers :color blue)
      ("R" Buffer-menu-isearch-buffers-regexp :color blue)
      ("v" Buffer-menu-select "select" :color blue)
      ("o" Buffer-menu-other-window "other-window" :color blue)
      ("q" quit-window "quit" :color blue))

    ;; Convienience function to open buffer list and hydra
    (defun buffer-list-hydra ()
      (interactive)
      (buffer-menu)
      (hydra-buffer-menu/body)
      )
  #+END_SRC
*** Windows
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-window (:hint nil)
	"
	  Movement^^        ^Split^         ^Switch^		^Resize^
	  ----------------------------------------------------------------
	  _h_ ←       	_v_ertical    	_b_uffer		_q_ X←
	  _j_ ↓        	_x_ horizontal	_f_ind files	_w_ X↓
	  _k_ ↑        	_z_ undo      	_a_ce 1		_e_ X↑
	  _l_ →        	_Z_ reset      	_s_wap		_r_ X→
	  _F_ollow		_D_lt Other   	_S_ave		max_i_mize
	  _Q_ cancel	_o_nly this   	_d_elete	
	  "
	("h" windmove-left )
	("j" windmove-down )
	("k" windmove-up )
	("l" windmove-right )
	("q" enlarge-window-horizontally)
	("w" shrink-window)
	("e" enlarge-window)
	("r" shrink-window-horizontally)
	("b" helm-mini)
	("f" helm-find-files)
	("F" follow-mode)
	("a" (lambda ()
	       (interactive)
	       (ace-window 1)
	       (add-hook 'ace-window-end-once-hook
			 'hydra-window/body))
	 )
	("v" (lambda ()
	       (interactive)
	       (split-window-right)
	       (windmove-right))
	 )
	("x" (lambda ()
	       (interactive)
	       (split-window-below)
	       (windmove-down))
	 )
	("s" (lambda ()
	       (interactive)
	       (ace-window 4)
	       (add-hook 'ace-window-end-once-hook
			 'hydra-window/body)))
	("S" save-buffer)
	("d" delete-window)
	("D" (lambda ()
	       (interactive)
	       (ace-window 16)
	       (add-hook 'ace-window-end-once-hook
			 'hydra-window/body))
	 )
	("o" delete-other-windows)
	("i" ace-maximize-window)
	("z" (progn
		    (winner-undo)
		    (setq this-command 'winner-undo))
	 )
	("Z" winner-redo)
	("Q" nil)
	)
    #+END_SRC
* Backups
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  #+END_SRC
* General settings
   #+BEGIN_SRC emacs-lisp
     (global-display-line-numbers-mode)
     (global-visual-line-mode 1)
     (set-face-attribute 'default nil :height 150)

     (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))

     (setq buffer-save-without-query t)

     ;; https://www.emacswiki.org/emacs/TrampMode#toc25
     (setq tramp-default-method "ssh")
   #+END_SRC
* Useful packages 
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t) 
      (setq evil-want-keybinding nil)
      :config (evil-mode 1)
      )
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init)
      )

    (use-package evil-escape
      :config
      (setq-default evil-escape-key-sequence "fd")
      (evil-escape-mode)
      )
  #+END_SRC
  See which keys are available
  #+BEGIN_SRC emacs-lisp
    (use-package which-key :config (which-key-mode))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package helm :config (helm-mode))
    (use-package helm-projectile)
    (use-package helm-rg)
    (use-package helm-swoop)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package powerline :config (powerline-default-theme))

    (setq powerline-color1 "#073642")
    (setq powerline-color2 "#002b36")

    (set-face-attribute 'mode-line nil
			:foreground "#fdf6e3"
			:background "#2aa198"
			:box nil)
    (set-face-attribute 'mode-line-inactive nil
			:box nil)

    ;; (setq powerline-color1 "#657b83")
    ;; (setq powerline-color2 "#839496")

    ;; (set-face-attribute 'mode-line nil
    ;; 		    :foreground "#fdf6e3"
    ;; 		    :background "#859900"
    ;; 		    :box nil)
    ;; (set-face-attribute 'mode-line-inactive nil
    ;; 		    :box nil)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard 
      :config 
      (dashboard-setup-startup-hook)
      (add-hook 'dashboard-mode-hook 'normal-mode)
      )
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package projectile :config (projectile-mode +1))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package magit)
    (use-package evil-magit)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package evil-nerd-commenter)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package ace-jump-mode)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      )
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package ace-link :config (ace-link-setup-default))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package evil-matchit :config (global-evil-matchit-mode 1))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package winum :config (winum-mode))
  #+END_SRC
  https://melpa.org/#/yaml-mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
	      '(lambda ()
		 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
  ;; (use-package iedit)
  (use-package evil-multiedit)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package helm-ag)
    (custom-set-variables
     '(helm-ag-base-command "rg --no-heading")
     '(helm-ag-success-exit-status '(0 2)))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
  (use-package fzf :init (setenv "FZF_DEFAULT_COMMAND" "fd --type f"))
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
  (use-package elfeed)
  (use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  )
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package vterm)
  #+END_SRC
* General Keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :init
    (setq general-override-states '(insert
				    emacs
				    hybrid
				    normal
				    visual
				    motion
				    operator
				    replace))
				    )
  (general-auto-unbind-keys)

  (general-define-key
   :states '(
				    emacs
				    hybrid
				    normal
				    visual
				    motion
				    operator
				    replace)
  :keymaps 'override
   :prefix "SPC"

   "" nil
   "m" '(:ignore t :which-key "Major")

   "TAB" '(evil-switch-to-windows-last-buffer :which-key "Last Buffer")
   "SPC" 'helm-M-x
   "'" 'vterm
   "a" '(:ignore t :which-key "Applications")
   "ad" 'dired
   "aD" 'docker
   "an" '(:ignore t :which-key "Notebook")
   "anr" 'ein:run
   "ans" 'ein:stop
   "ano" 'ein:process-find-file-callback
   "ao" '(:ignore t :which-key "Org")

   "aoa" 'org-agenda

   "f" '(:ignore t :which-key "Files")
   "fs" 'save-buffer
   "fr" 'helm-recentf
   "ff" 'helm-find-files
   "fF" 'fzf-directory
   "fS" 'save-some-buffers

   "x" '(:ignore t :which-key "Text")
   "xa" 'text-scale-adjust

   "d" '(:ignore t :which-key "Dotfile")
   "dr" 'reload-emacs-configuration
   "do" 'open-emacs-configuration

   "b" '(:ignore t :which-key "Buffers/Bookmarks")
   "bb" 'helm-buffers-list
   "bd" 'kill-current-buffer
   "bs" 'bookmark-set
   "bo" 'helm-bookmarks
   "b." 'buffer-list-hydra

   "h" '(:ignore t :which-key "Help")
   "hk" 'describe-key 
   "hv" 'describe-variable
   "hm" 'describe-mode
   "hf" 'describe-function

   "j" '(:ignore t :which-key "Jump")
   "jw" 'ace-jump-word-mode 

   "g" '(:ignore t :which-key "Git")
   "gs" 'magit-status


   "s" '(:ignore t :which-key "Search")
   ;; Searches without input
   "ss" 'helm-swoop-without-pre-input 
   "sS" 'helm-swoop
   "se" 'evil-multiedit-match-all

   "l" '(:ignore t :which-key "Links")
   "lo" 'ace-link
   "ls" 'org-store-link

   "c" '(:ignore t :which-key "Comments")
   "cl" 'evilnc-comment-or-uncomment-lines

   "w" '(:ignore t :which-key "Windows")
   "wd" 'delete-window
   "wh" 'split-window-horizontally
   "wv" 'split-window-vertically
   "ws" 'ace-window
   "1" '(winum-select-window-1 :which-key "window 1")
   "2" '(winum-select-window-2 :which-key "window 2")
   "3" '(winum-select-window-3 :which-key "window 3")
   "4" '(winum-select-window-4 :which-key "window 4")
   "5" '(winum-select-window-5 :which-key "window 5")
   "w." 'hydra-window/body

   "p" '(:ignore: t :which-key "Projects")
   "pf" 'helm-projectile-find-file
   "pr" 'helm-projectile-recentf
   "pp" 'helm-projectile-switch-project
   "ps" 'helm-do-ag-project-root

   "q" '(:ignore t :which-key "Quit")
   "qq" 'kill-emacs
   )

  (general-define-key
   :keymaps 'evil-multiedit-state-map
   "RET" 'evil-multiedit-toggle-or-restrict-region
   "n" 'evil-multiedit-next
   "N" 'evil-multiedit-prev
   )
  #+END_SRC
* Tools
** Pdf 
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :config     
       (setq-default pdf-view-display-size 'fit-page)
       )
     (pdf-loader-install)
     (general-define-key
      :states 'normal
      :keymaps 'pdf-view-mode-map
      "," nil
      )
     (general-define-key
      :states 'normal
      :keymaps 'pdf-view-mode-map
      :prefix "SPC m"
      "f" 'pdf-view-fit-height-to-window
      "s" 'pdf-occur
      )
   #+END_SRC
** Org mode 
   #+BEGIN_SRC emacs-lisp
     (use-package org-cliplink)

     (general-define-key
      :states '(normal visual emacs)
      :keymaps 'org-mode-map
      :prefix "SPC m"
      "c" 'org-capture
      "a" 'org-agenda
      "r" '(org-refile :which-key "Refile")
      "l" '(:ignore t :which-key "Links")
      "li" 'org-insert-link
      "lI" 'org-cliplink
      "t" '(:ignore t :which-key "Toggle")
      "t" 'org-toggle-link-display
      "tL" 'org-latex-preview
      "j" '(:ignore t :which-key "Jump")
      "ji" 'helm-org-in-buffer-headings
      "'" 'org-edit-special
      )
     (general-define-key
      :keymaps 'org-agenda-mode-map
      ;; R since r is refresh
      "R" 'org-agenda-refile
      ;; "x" makes bulk action
      ;; "m" marks
      )

     (setq org-capture-templates '(
				   ("t" "todo" entry
				    (file "~/Dropbox/org/gtd/inbox.org")
				    "* TODO %? \n  %U \n  %a"
				    )
				   ("m" "meeting" entry
				    (file "~/Dropbox/org/gtd/inbox.org")
				    "* MEETING with %? :MEETING: \n  %U"
				    )
				   )
	   )

     (setq org-agenda-files '("~/Dropbox/org/gtd/inbox.org"
			      "~/Dropbox/org/gtd/gtd.org"
			      "~/Dropbox/org/gtd/someday.org"))

     (setq org-refile-targets '((nil :maxlevel . 9)
				(org-agenda-files :maxlevel . 9)
				("~/Dropbox/org/gtd/archive.org" :maxlevel . 1)))


     (setq org-agenda-custom-commands
	   '(("A" todo "DONE"))
	   )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :after org
       :config
       ;; https://github.com/Somelauw/evil-org-mode
       ;; Uses evil-collection
       ;; (add-hook 'org-mode-hook 'evil-org-mode)
       ;; (add-hook 'evil-org-mode-hook
       ;; 		 (lambda ()
       ;; 		   (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys)
       )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     ;; Makes org open pdf links correctly
     (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdftools-open link))))

     (general-define-key 
      :states 'normal
      :keymaps'org-mode-map
      "RET" 'org-open-at-point)

     (use-package org-noter)
     (use-package org-pdftools)
     (org-pdftools-setup-link)

     (use-package org-noter-pdftools
       :after org-noter
       :config
       (with-eval-after-load 'pdf-annot
	 (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

     (use-package helm-org)
     (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
     (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags))
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Plantuml
   #+BEGIN_SRC emacs-lisp
   (use-package plantuml-mode
   :config
   (setq plantuml-jar-path "~/plantuml.jar")
   (setq plantuml-default-exec-mode 'jar)
   (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
   (plantuml-enable-debug)
   (setq plantuml-output-type "png")
   )
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet)
   (use-package yasnippet-snippets)
   (yas-reload-all)
   (add-hook 'prog-mode-hook #'yas-minor-mode)
   #+END_SRC
** Docker
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode)
   (use-package docker-compose-mode)
   (use-package docker)
   (use-package docker-tramp)
   #+END_SRC
* Programming
  https://www.flycheck.org/en/latest/
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck :init (global-flycheck-mode))
  #+END_SRC
** LSP
   https://emacs-lsp.github.io/lsp-mode/page/installation/
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook (
	      (dockerfile-mode . lsp)
	      (lsp-mode . lsp-lens-mode)
	      (scala-mode . lsp)
	      (sh-mode . lsp)
	      (lsp-mode . lsp-enable-which-key-integration)
	      (lsp-mode . lsp-ui-mode)
	      ) 
       :commands lsp
       :config
       (setq lsp-prefer-flymake nil)
       (setq lsp-log-io t)
       )

     ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
     (setq lsp-prefer-capf t)

     (use-package lsp-ui :commands lsp-ui-mode)
     (use-package helm-lsp :commands helm-lsp-workspace-symbol)
     (use-package lsp-treemacs
       :pin melpa-stable
       :commands lsp-treemacs-errors-list
       )
     (use-package dap-mode
       :after lsp-mode
       :hook
       (lsp-mode . dap-mode)
       (lsp-mode . dap-ui-mode)
       )
     (require 'dap-python)

     (add-hook 'dap-stopped-hook
	       (lambda (arg) (call-interactively #'dap-hydra)))
   #+END_SRC
** Python
  #+BEGIN_SRC emacs-lisp
    ;; https://emacs-lsp.github.io/lsp-python-ms/
    (use-package lsp-python-ms
      :ensure t
      :init (setq lsp-python-ms-auto-install-server t)
      :hook (python-mode . (lambda ()
			      (require 'lsp-python-ms)
			      (lsp))))  ; or lsp-deferred

    ;; (setf (lsp-session-folders-blacklist (lsp-session)) nil)
    ;; (lsp--persist-session (lsp-session))

    (use-package pyenv-mode)
    (use-package importmagic
      :config
      (add-hook 'python-mode-hook 'importmagic-mode))
    (use-package python-pytest)
    (use-package quickrun
      :config
      (setq quickrun-timeout-seconds nil)
      )

    (use-package python-black
      :demand
      :after python)

    (use-package sphinx-doc)
    (add-hook 'python-mode-hook (lambda ()
				  (require 'sphinx-doc)
				  (sphinx-doc-mode t)))
    (add-hook 'python-mode-hook 'hs-minor-mode)

    (general-define-key
     :states '(normal visual emacs)
     :keymaps 'python-mode-map
     :major-modes 'python-mode
     :prefix "SPC m"

     ;; "=" 'lsp-format-buffer
     "R" 'lsp-rename
     "b" 'python-black-buffer
     "t" '(:ignore t :which-key "Tests")
     "tt" 'python-pytest
     "tf" 'python-pytest-function
     "t." 'python-pytest-popup
     "r" '(:ignore t :which-key "Run")
     "rr" 'quickrun
     "ra" 'quickrun-with-arg
     "d" '(:ignore: t :which-key "Debug")
     "db" 'dap-breakpoint-toggle
     "dd" 'dap-debug
     "i" '(run-python :which-key "ipython")
     "g" '(:ignore t :which-key "Go to")
     "gd" 'lsp-find-definition
     "gr" 'lsp-find-references
     "v" '(:ignore t :which-key "Pyenv")
     "vs" 'pyenv-mode-set
     "x" '(:ignore t :which-key "Text")
     "xs" 'yas-insert-snippet
     "a" 'helm-lsp-code-actions
     )
  #+END_SRC
*** EIN 
   #+BEGIN_SRC emacs-lisp 
     (use-package ein)
     (setq ein:output-area-inlined-images t)
     (setq ein:jupyter-default-notebook-directory "~/")

     (use-package elpy
       :init
       (elpy-enable))
     (add-hook 'ein:notebook-mode-hook 'elpy-enable)

     (general-define-key
      :definer 'minor-mode
      :states 'normal
      :keymaps 'ein:notebook-mode
      :prefix "SPC m"
      "b" 'ein:worksheet-insert-cell-below
      "a" 'ein:worksheet-insert-cell-above
      "s" 'ein:notebook-save-notebook-command
      "e" 'ein:worksheet-execute-cell
      "E" 'ein:worksheet-execute-all-cells
      "RET" 'ein:worksheet-execute-cell-and-goto-next-km
      "o" 'ein:worksheet-clear-output
      "O" 'ein:worksheet-clear-all-output-km
      "d" 'ein:worksheet-delete-cell
      "D" 'elpy-doc
      "c" 'ein:notebook-kill-kernel-then-close-command
      "k" '(:ignore t :which-key "Kernel")
      "ks" 'ein:notebook-switch-kernel
      "kr" 'ein:notebook-reconnect-kernel
      "ki" 'ein:notebook-kernel-interrupt-command
      )
   #+END_SRC
** Scala 
   [[https://scalameta.org/metals/docs/editors/emacs.html][Emacs · Metals]] 
   #+BEGIN_SRC emacs-lisp
	;; Enable scala-mode for highlighting, indentation and motion commands
     (use-package scala-mode
       :mode "\\.s\\(cala\\|bt\\)$")

     ;; Enable sbt mode for executing sbt commands
     (use-package sbt-mode
       :commands sbt-start sbt-command
       :config
       ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
       ;; allows using SPACE when in the minibuffer
       (substitute-key-definition
        'minibuffer-complete-word
        'self-insert-command
        minibuffer-local-completion-map)
        ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
        (setq sbt:program-options '("-Dsbt.supershell=false"))
     )

     ;; Add metals backend for lsp-mode
     (use-package lsp-metals)

     ;; Add company-lsp backend for metals
     (use-package company-lsp)

     ;; Use the Debug Adapter Protocol for running tests and debugging
     (use-package posframe
       ;; Posframe is a pop-up tool that must be manually installed for dap-mode
       )

   #+END_SRC
** Java
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
     (use-package dap-java :ensure nil)
   #+END_SRC
* Left over
  #+BEGIN_SRC emacs-lisp
    (general-def
      :states 'normal
      ","
      ;; Binds , to access major mode
      (general-key-dispatch (general-simulate-key "SPC m")
	:timeout 0.25
	;; Binds ,, if fast
	"," (general-simulate-key "C-c C-c")
	)
      )
    (add-hook 'fundamental-mode-hook 'normal-mode) 
  #+END_SRC
* Other/Testing
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
